<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>Telegram Relations Graph</title>
		<script src="https://d3js.org/d3.v5.min.js"></script>
		<style>
			.links line {
				stroke: #999;
				stroke-opacity: 0.6;
			}
			
			.nodes circle {
				stroke: #fff;
				stroke-width: 1.5px;
			}
			
			text {
				font-family: sans-serif;
				font-size: 10px;
			}
			
			</style>
	</head>
	<body>
		<script>
			// get the nodes and links from the server
			const nodes = <%- JSON.stringify(nodes) %>;
			const links = <%- JSON.stringify(edges) %>;
			let sortedNodes = nodes.sort((a, b) => b.participantsCount - a.participantsCount);
			
			// get the width and height of the window
			const width = document.documentElement.clientWidth - 20;
			const height = document.documentElement.clientHeight - 20;

			// create the svg
			const svg = d3.select("body")
				.append("svg")
				.attr("width", width)
				.attr("height", height)
				.call(d3.zoom().scaleExtent([0.1, 10]).on("zoom", zoomed))
				.append("g");

			// create the simulation
			const simulation = d3.forceSimulation()
				.force("link", d3.forceLink().id(d => d.id))
				.force("charge", d3.forceManyBody().strength(-1000))
				.force("center", d3.forceCenter(width / 2, height / 2));

			// add the arrows
			const arrow = svg.append("defs").selectAll("marker")
				.data(links)
				.enter()
				.append("marker")
				.attr("id", (d, i) => `arrowhead-${i}`)
				.attr("viewBox", "0 0 10 10")
				.attr("refX", (d) => getTargretRadius(d.target) + 12)
				.attr("refY", 5)
				.attr("markerWidth", 4)
				.attr("markerHeight", 4)
				.attr("orient", "auto")
				.append("path")
				.attr("d", "M 0 0 L 10 5 L 0 10 z")
				.attr("class", "arrow")
				.style("fill", "#838383");

			// add links to graph
			const link = svg.append("g")
				.attr("class", "links")
				.selectAll("line")
				.data(links)
				.enter()
				.append("line")
				.attr("stroke", "#aaa")
				.attr("stroke-width", 2)
				.attr("marker-end", (d, i) => `url(#arrowhead-${i})`);

			// add nodes to graph
			const node = svg.append("g")
				.attr("class", "nodes")
				.selectAll("circle")
				.data(nodes)
				.enter()
				.append("circle")
				.attr("r", d => getCircleradius(d.participantsCount))
				.attr("fill", "#78a5fd")
				.style("cursor", "pointer")
				.call(d3.drag()
					.on("start", dragstarted)
					.on("drag", dragged)
					.on("end", dragended));

			// add labels to nodes
			const label = svg.append("g")
				.attr("class", "labels")
				.selectAll("text")
				.data(nodes)
				.enter()
				.append("text")
				.text(d => d.name)
				.attr("font-size", 8)
				.attr("text-anchor", "middle")
				.attr("alignment-baseline", "middle")
				.style("font-weight", "bold")
				.style("cursor", "pointer")
				.call(d3.drag()
					.on("start", textdragstarted)
					.on("drag", textdragged)
					.on("end", textdragended));

			// simulation setup
			simulation.nodes(nodes)
				.on("tick", ticked);

			simulation.force("link")
				.links(links);

			// update simulation nodes, links
			function ticked() {
				link
					.attr("x1", d => d.source.x)
					.attr("y1", d => d.source.y)
					.attr("x2", d => d.target.x)
					.attr("y2", d => d.target.y);

				node
					.attr("cx", d => d.x)
					.attr("cy", d => d.y);

				label
					.attr("x", d => d.x)
					.attr("y", d => d.y);
			};

			function dragstarted(d) {
				if (!d3.event.active) simulation.alphaTarget(0.3).restart();
				d.fx = d.x;
				d.fy = d.y;
			}

			function dragged(d) {
				d.fx = d3.event.x;
				d.fy = d3.event.y;
			}

			function dragended(d) {
				if (!d3.event.active) simulation.alphaTarget(0);
				d.fx = d.x;
				d.fy = d.y;
			}

			function textdragstarted(d) {
				if (!d3.event.active) simulation.alphaTarget(0.3).restart();
				d.fx = d.x;
				d.fy = d.y;
			}

			function textdragged(d) {
				d.fx = d3.event.x;
				d.fy = d3.event.y;
				d.x = d3.event.x;
				d.y = d3.event.y;
			}

			function textdragended(d) {
				if (!d3.event.active) simulation.alphaTarget(0);
				d.fx = d.x;
				d.fy = d.y;
			}

			function zoomed() {
				svg.attr("transform", d3.event.transform);
			};
			
			function getTargretRadius(target) {
				const targetNode = nodes.find(node => node.id === target);
				return getCircleradius(targetNode.participantsCount);
			};

			function getCircleradius(participantsCount) {
				if (participantsCount < 1000) return 8;
				if (participantsCount < 3000) return 10;
				if (participantsCount < 5000) return 12;
				if (participantsCount < 10000) return 14;
				if (participantsCount < 20000) return 18;
				if (participantsCount < 50000) return 22;
				if (participantsCount < 100000) return 26;
				if (participantsCount < 200000) return 30;
				else return 34;
			};
		</script>
	</body>
</html>